type Meal {
  id: ID!
  name: String!
  picture: String!
  sessions: [Session!]!
  createdAt: Time!
  updatedAt: Time!
}

type User {
  id: ID!
  name: String!
  phone: String!
  email: String!
  favourites: [Meal!]!
  connections: [User!]!
  sessions: [Session!]!
  createdAt: Time!
  updatedAt: Time!
}

type Session {
  id: ID!
  proposed: [Meal!]!
  users: [User!]!
  voteUp: [Meal!]!
  voteDown: [Meal!]!
  createdAt: Time!
  updatedAt: Time!
}

type Query {
  meal: Meal
  meals: [Meal!]!
  user: User
  users: [User!]!
  session: Session
  sessions: [Session!]!
}

type Mutation {
  createUser(input: NewUser!): ID
  editUser(input: EditUser!): ID
  deleteUser(userId: ID!): Boolean!

  createMeal(input: NewMeal!): ID
  editMeal(input: EditMeal!): ID
  deleteMeal(mealId: ID!): Boolean!

  createSession(input: NewSession!): ID
  deleteSession(sessionId: ID!): Boolean!
  addMealsToSession(input: MealsToSessionMutation!): [ID!]
  removeMealsFromSession(input: MealsToSessionMutation!): [ID!]
  voteUp(input: VoteMutation!): Boolean!
  voteDown(input: VoteMutation!): Boolean!
  inviteUserToSession(input: InviteUsersToSession): Boolean!
}

input NewUser {
  name: String!
  phone: String!
  email: String!
}

input EditUser {
  id: ID!
  name: String
  phone: String
  email: String
}

input NewMeal {
  name: String!
  picture: String!
}

input EditMeal {
  id: ID!
  name: String
  picture: String
}

input NewSession {
  proposedMealIds: [ID!]!
  usersId: ID!
}

input MealsToSessionMutation {
  sessionId: ID!
  mealIds: [ID!]!
}

input VoteMutation {
  sessionId: ID!
  mealId: ID!
}

input InviteUsersToSession {
  sessionId: ID!
  userIds: [ID!]!
}